// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================== ROLE =================
model Role {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  users       User[]
}

// ================== USER =================
model User {
  id         Int           @id @default(autoincrement())
  email      String        @db.VarChar(255)
  role       Role          @relation(fields: [roleId], references: [id])
  roleId     Int
  //relation for my own teams and other teams where I belong
  myTeams    Team[]        @relation(name: "teacher")
  teams      Team[]        @relation(name: "members")
  //relation comments posts
  posts      Post[]
  //relation project
  projects   Project[]
  //relation comments project
  ProjectComment  ProjectComment[]
  PostComent PostComment[]
}

// ================== TEAM =================
model Team {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  teacher   User      @relation(fields: [teacherId], references: [id], name: "teacher")
  teacherId Int
  members   User[]    @relation(name: "members")
  //relation with project
  projects  Project[]
}

// ================== POST =================
model Post {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String        @db.VarChar(255)
  //relation user
  author      User          @relation(fields: [authorId], references: [id])
  authorId    Int
  //relation comment
  PostComent  PostComment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// ================== COMMENTS =================
model PostComment {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(255)
  featured    Boolean
  //relation post
  posts       Post     @relation(fields: [postId], references: [id])
  postId      Int
  //relation user
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   Int?
}

// ================== Project =================

model Project {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String        @db.VarChar(255)
  //relation user
  boss        User          @relation(fields: [bossId], references: [id])
  bossId      Int
  //relation team
  team        Team          @relation(fields: [teamId], references: [id])
  teamId      Int
   //relation comment
  ProjectComments  ProjectComment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProjectComment {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(255)
  featured    Boolean
  //relation post
  projects       Project     @relation(fields: [projectId], references: [id])
  projectId      Int
  //relation user
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}